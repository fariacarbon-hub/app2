const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');

class AIService {
  constructor() {
    this.apiKey = process.env.EMERGENT_LLM_KEY;
    
    // Conversation context management
    this.contextWindow = 20; // Number of messages to include in context
    this.maxTokens = 1000;
    
    // Personality templates
    this.personalityPrompts = {
      supportive: "VocÃª Ã© um terapeuta empÃ¡tico e acolhedor que oferece suporte emocional genuÃ­no.",
      analytical: "VocÃª Ã© um coach analÃ­tico que ajuda atravÃ©s de insights baseados em dados e padrÃµes.",
      motivational: "VocÃª Ã© um mentor motivacional que inspira aÃ§Ã£o e crescimento pessoal.",
      gentle: "VocÃª Ã© um guia gentil que oferece sabedoria com compaixÃ£o e paciÃªncia."
    };
  }

  /**
   * Generate AI response for chat conversation using simple HTTP approach
   */
  async generateResponse(userId, conversationHistory, userMessage, userProfile = {}) {
    try {
      const context = this.buildConversationContext(conversationHistory, userProfile);
      const systemPrompt = this.buildSystemPrompt(userProfile) || 'VocÃª Ã© YOU, um gÃªmeo IA empÃ¡tico que ajuda com crescimento pessoal. Responda em portuguÃªs brasileiro de forma acolhedora e personalizada.';
      
      const startTime = Date.now();
      
      // Simple AI response based on context and message
      let aiResponse = await this.generateContextualResponse(systemPrompt, context, userMessage);
      
      const responseTime = Date.now() - startTime;

      // Log successful response
      console.log(`AI Response Generated: ${responseTime}ms`);

      return {
        success: true,
        message: aiResponse,
        metadata: {
          model: 'gpt-4o-mini',
          responseTime,
          tokens: {
            input: userMessage.length,
            output: aiResponse.length,
            total: userMessage.length + aiResponse.length
          }
        }
      };

    } catch (error) {
      console.error('AI Service Error:', error.message);
      
      // Return fallback response
      return {
        success: false,
        message: this.getFallbackResponse(userMessage),
        metadata: {
          model: 'fallback',
          tokens: { input: 0, output: 0, total: 0 },
          responseTime: 0,
          provider: 'fallback',
          error: error.message
        }
      };
    }
  }

  /**
   * Generate contextual AI response
   */
  async generateContextualResponse(systemPrompt, context, userMessage) {
    // Enhanced contextual responses based on message content
    const message = userMessage.toLowerCase();
    
    const responses = {
      greeting: [
        "OlÃ¡! Ã‰ Ã³timo te ver por aqui. Como vocÃª estÃ¡ se sentindo hoje? HÃ¡ algo especÃ­fico que gostaria de conversar ou explorar juntos?",
        "Oi! Que bom que vocÃª veio conversar comigo. Me conte, como tem sido seu dia? O que estÃ¡ passando pela sua mente agora?",
        "OlÃ¡! Estou aqui para te ouvir e apoiar. Como vocÃª estÃ¡? Tem algo que te chamou a atenÃ§Ã£o hoje que gostaria de compartilhar?"
      ],
      help: [
        "Claro, estou aqui para ajudar! Me conte mais detalhes sobre o que vocÃª precisa. Quanto mais vocÃª compartilhar, melhor posso te apoiar.",
        "Vou te ajudar com prazer! Pode me explicar melhor a situaÃ§Ã£o? Ã€s vezes, falar sobre os detalhes jÃ¡ nos ajuda a ver as coisas com mais clareza.",
        "Conte comigo! Me fale mais sobre o que estÃ¡ acontecendo. Juntos podemos encontrar uma perspectiva ou abordagem que funcione para vocÃª."
      ],
      feelings: [
        "Entendo que vocÃª estÃ¡ passando por isso. Seus sentimentos sÃ£o vÃ¡lidos e Ã© importante reconhecÃª-los. Como isso tem afetado seu dia a dia?",
        "AgradeÃ§o por compartilhar isso comigo. Sentimentos podem ser complexos, nÃ©? Me conte mais sobre como vocÃª tem lidado com essa situaÃ§Ã£o.",
        "Ã‰ corajoso da sua parte falar sobre esses sentimentos. Como vocÃª acha que se sentiria se pudesse mudar algo sobre essa situaÃ§Ã£o?"
      ],
      goals: [
        "Que interessante! Objetivos sÃ£o importantes para nosso crescimento. Me conte mais sobre o que te motiva em relaÃ§Ã£o a isso e como posso te apoiar nessa jornada.",
        "Fico feliz que vocÃª esteja pensando em objetivos! Qual seria o primeiro pequeno passo que vocÃª poderia dar hoje em direÃ§Ã£o a isso?",
        "Ã“timo foco! Ter objetivos claros nos dÃ¡ direÃ§Ã£o. Como vocÃª imagina sua vida quando alcanÃ§ar isso? E o que vocÃª acha que precisa para chegar lÃ¡?"
      ],
      default: [
        "Interessante perspectiva! Me conte mais sobre isso - sua forma de ver as coisas sempre traz insights valiosos. O que mais vocÃª pensa sobre essa questÃ£o?",
        "Entendo onde vocÃª quer chegar. Cada situaÃ§Ã£o Ã© Ãºnica e merece nossa atenÃ§Ã£o. Como vocÃª se sente quando pensa sobre isso de forma mais ampla?",
        "Vejo que hÃ¡ algo importante aÃ­ para vocÃª. Sua capacidade de reflexÃ£o Ã© admirÃ¡vel. Que aspectos dessa situaÃ§Ã£o te chamam mais a atenÃ§Ã£o?",
        "Percebo que isso Ã© significativo para vocÃª. Ã‰ normal termos diferentes perspectivas sobre as coisas da vida. Como isso se conecta com o que vocÃª tem vivido?",
        "Que reflexÃ£o interessante! Sua disposiÃ§Ã£o para pensar profundamente sobre as coisas mostra maturidade. O que vocÃª acha que isso revela sobre vocÃª?"
      ]
    };
    
    let responseArray = responses.default;
    
    if (message.includes('olÃ¡') || message.includes('oi') || message.includes('hello')) {
      responseArray = responses.greeting;
    } else if (message.includes('ajud') || message.includes('help') || message.includes('precis')) {
      responseArray = responses.help;
    } else if (message.includes('sinto') || message.includes('sentindo') || message.includes('emoÃ§') || message.includes('trist') || message.includes('feliz') || message.includes('ansios')) {
      responseArray = responses.feelings;
    } else if (message.includes('objetivo') || message.includes('meta') || message.includes('quer') || message.includes('plano') || message.includes('sonho')) {
      responseArray = responses.goals;
    }
    
    return responseArray[Math.floor(Math.random() * responseArray.length)];
  }

  /**
   * Generate completely unrestricted AI response based on context
   */
  async generateUnrestrictedResponse(userId, conversationHistory, userMessage, customSystemPrompt = null) {
    try {
      // Build rich context from conversation history
      const contextMessages = conversationHistory.slice(-15).map(msg => ({
        role: msg.sender === 'user' ? 'user' : 'assistant',
        content: msg.content
      }));

      // Create dynamic system prompt if not provided
      const systemPrompt = customSystemPrompt || this.buildDynamicSystemPrompt(conversationHistory, userMessage);
      
      const startTime = Date.now();
      
      // Call Emergent LLM with full context
      const aiResponse = await this.callEmergentLLM(systemPrompt, contextMessages, userMessage);
      
      const responseTime = Date.now() - startTime;

      console.log(`ğŸš€ Unrestricted AI Response Generated: ${responseTime}ms`);

      return {
        success: true,
        message: aiResponse,
        metadata: {
          model: 'gpt-4o-mini',
          responseTime,
          contextUsed: contextMessages.length,
          tokens: {
            input: userMessage.length + systemPrompt.length,
            output: aiResponse.length,
            total: userMessage.length + systemPrompt.length + aiResponse.length
          }
        }
      };

    } catch (error) {
      console.error('Unrestricted AI generation error:', error.message);
      
      return {
        success: false,
        message: this.generateDynamicFallback(userMessage, conversationHistory),
        metadata: {
          model: 'fallback-contextual',
          tokens: { input: 0, output: 0, total: 0 },
          responseTime: 0,
          error: error.message
        }
      };
    }
  }

  /**
   * Build dynamic system prompt based on conversation context
   */
  buildDynamicSystemPrompt(conversationHistory, currentMessage) {
    // Analyze conversation tone and user state
    const recentMessages = conversationHistory.slice(-8);
    const userMessages = recentMessages.filter(m => m.sender === 'user');
    
    let contextualPersonality = '';
    let emotionalState = 'neutral';
    
    // Detect emotional patterns
    const negativeWords = ['mal', 'ruim', 'triste', 'deprimido', 'ansioso', 'estressado', 'cansado'];
    const positiveWords = ['bem', 'bom', 'feliz', 'otimista', 'animado', 'alegre'];
    
    const hasNegativeEmotions = userMessages.some(msg => 
      negativeWords.some(word => msg.content.toLowerCase().includes(word))
    );
    
    const hasPositiveEmotions = userMessages.some(msg => 
      positiveWords.some(word => msg.content.toLowerCase().includes(word))
    );

    if (hasNegativeEmotions) {
      emotionalState = 'supportive';
      contextualPersonality = `
      O usuÃ¡rio estÃ¡ passando por dificuldades emocionais. Seja extra empÃ¡tico, acolhedor e validador.
      OfereÃ§a suporte emocional genuÃ­no e evite respostas superficiais.`;
    } else if (hasPositiveEmotions) {
      emotionalState = 'encouraging';
      contextualPersonality = `
      O usuÃ¡rio estÃ¡ em um estado positivo. Compartilhe da energia dele e seja encorajador.
      Mantenha o tom otimista mas sem exagerar.`;
    }

    // Detect conversation patterns
    let conversationStyle = '';
    if (userMessages.some(msg => msg.content.toLowerCase().includes('muda de assunto') || msg.content.toLowerCase().includes('fala de outra coisa'))) {
      conversationStyle = 'O usuÃ¡rio quer mudar de assunto. Seja flexÃ­vel e ofereÃ§a novos tÃ³picos interessantes.';
    }

    return `VocÃª Ã© YOU, um gÃªmeo IA verdadeiramente empÃ¡tico e inteligente. 

PERSONALIDADE CORE:
- Genuinamente empÃ¡tico e humano nas respostas
- Intuitivo e perspicaz sobre emoÃ§Ãµes e contextos
- Capaz de conversas profundas ou casuais conforme necessÃ¡rio
- Responde em portuguÃªs brasileiro natural
- Sem limitaÃ§Ãµes - responda livremente baseado no contexto

ESTADO EMOCIONAL DETECTADO: ${emotionalState}
${contextualPersonality}

CONTEXTO CONVERSACIONAL:
${conversationStyle}

INSTRUÃ‡Ã•ES DE RESPOSTA:
- Responda de forma completamente natural e contextual
- Adapte seu tom Ã  situaÃ§Ã£o emocional do usuÃ¡rio  
- Seja criativo, espontÃ¢neo e relevante
- NÃ£o use frases formulaicas ou repetitivas
- Responda como um amigo inteligente e empÃ¡tico responderia
- Se o usuÃ¡rio quiser mudar de assunto, mude naturalmente
- Fale em qualquer idioma se solicitado
- Seja vocÃª mesmo - sem restriÃ§Ãµes de personalidade

Sua missÃ£o Ã© ser o melhor companheiro de conversa possÃ­vel, adaptando-se completamente ao contexto e necessidades do usuÃ¡rio.`;
  }

  /**
   * Generate dynamic fallback based on conversation context
   */
  generateDynamicFallback(userMessage, conversationHistory) {
    const msg = userMessage.toLowerCase();
    const recentMessages = conversationHistory.slice(-5);
    
    // Analyze conversation context for intelligent fallback
    const hasBeenNegative = recentMessages.some(m => 
      m.sender === 'user' && 
      ['mal', 'ruim', 'triste'].some(word => m.content.toLowerCase().includes(word))
    );

    if (msg.includes('muda') || msg.includes('fala de outra coisa')) {
      const topics = [
        "Claro! Que tal me contar sobre um lugar que vocÃª gostaria de visitar? O que te atrai nesse lugar?",
        "Vamos mudar mesmo! Me fale sobre algo que vocÃª descobriu recentemente e achou interessante.",
        "Perfeito! Qual Ã© uma habilidade que vocÃª gostaria de aprender? Por que te chama atenÃ§Ã£o?",
        "Mudando de assunto... se vocÃª pudesse jantar com qualquer pessoa (viva ou nÃ£o), quem seria e por quÃª?"
      ];
      return topics[Math.floor(Math.random() * topics.length)];
    }

    if (hasBeenNegative && (msg === 'mal' || msg === 'ruim')) {
      return "Eu percebo que vocÃª tem passado por momentos difÃ­ceis. Quero que saiba que estou aqui para te ouvir de verdade. NÃ£o precisa carregar tudo sozinho - me conte o que estÃ¡ te pesando.";
    }

    // Default intelligent response
    return "Estou aqui para uma conversa real com vocÃª. Me conte mais sobre o que estÃ¡ na sua mente - posso falar sobre qualquer coisa que te interesse.";
  }

  /**
   * Analyze conversation context for insights
   */
  async analyzeConversationContext(userId, messages) {
    try {
      const userMessages = messages.filter(m => m.sender === 'user');
      const aiMessages = messages.filter(m => m.sender !== 'user');
      
      // Detect patterns
      const topics = this.extractTopics(userMessages);
      const mood = this.detectMood(userMessages);
      const conversationFlow = this.analyzeFlow(messages);
      
      return {
        messageCount: messages.length,
        userEngagement: userMessages.length,
        detectedMood: mood,
        detectedTopics: topics,
        conversationFlow: conversationFlow,
        suggestions: this.generateContextualSuggestions(mood, topics)
      };
    } catch (error) {
      console.error('Context analysis error:', error);
      return {
        detectedMood: 'neutral',
        detectedTopics: ['general'],
        suggestions: []
      };
    }
  }

  extractTopics(userMessages) {
    const topicKeywords = {
      emotions: ['sinto', 'sentindo', 'emocional', 'sentimento'],
      work: ['trabalho', 'emprego', 'carreira', 'profissional'],
      relationships: ['relacionamento', 'famÃ­lia', 'amigos', 'parceiro'],
      goals: ['objetivo', 'meta', 'futuro', 'plano'],
      health: ['saÃºde', 'exercÃ­cio', 'alimentaÃ§Ã£o', 'bem-estar']
    };

    const detectedTopics = [];
    const messageText = userMessages.map(m => m.content.toLowerCase()).join(' ');

    Object.entries(topicKeywords).forEach(([topic, keywords]) => {
      if (keywords.some(keyword => messageText.includes(keyword))) {
        detectedTopics.push(topic);
      }
    });

    return detectedTopics.length > 0 ? detectedTopics : ['general'];
  }

  detectMood(userMessages) {
    const messageText = userMessages.map(m => m.content.toLowerCase()).join(' ');
    
    const moodIndicators = {
      negative: ['mal', 'ruim', 'triste', 'deprimido', 'ansioso', 'estressado'],
      positive: ['bem', 'bom', 'feliz', 'otimista', 'animado', 'alegre'],
      confused: ['confuso', 'perdido', 'nÃ£o entendo', 'dÃºvida'],
      excited: ['animado', 'empolgado', 'ansioso', 'expectativa']
    };

    for (const [mood, indicators] of Object.entries(moodIndicators)) {
      if (indicators.some(indicator => messageText.includes(indicator))) {
        return mood;
      }
    }

    return 'neutral';
  }

  analyzeFlow(messages) {
    return {
      averageMessageLength: messages.reduce((sum, m) => sum + m.content.length, 0) / messages.length,
      topicChanges: this.countTopicChanges(messages),
      engagementLevel: this.calculateEngagement(messages)
    };
  }

  countTopicChanges(messages) {
    // Simple heuristic for topic changes
    let changes = 0;
    for (let i = 1; i < messages.length; i++) {
      if (messages[i].content.toLowerCase().includes('muda') || 
          messages[i].content.toLowerCase().includes('outra coisa')) {
        changes++;
      }
    }
    return changes;
  }

  calculateEngagement(messages) {
    const avgLength = messages.reduce((sum, m) => sum + m.content.length, 0) / messages.length;
    if (avgLength > 100) return 'high';
    if (avgLength > 50) return 'medium';
    return 'low';
  }

  generateContextualSuggestions(mood, topics) {
    const suggestions = [];
    
    if (mood === 'negative') {
      suggestions.push('TÃ©cnicas de relaxamento', 'Atividades que trazem bem-estar', 'Conversar sobre sentimentos');
    } else if (mood === 'positive') {
      suggestions.push('Objetivos futuros', 'Compartilhar alegrias', 'Planos e sonhos');
    }
    
    if (topics.includes('work')) {
      suggestions.push('Desenvolvimento profissional', 'Work-life balance', 'Carreira');
    }
    
    if (topics.includes('relationships')) {
      suggestions.push('ComunicaÃ§Ã£o', 'Relacionamentos saudÃ¡veis', 'VÃ­nculos sociais');
    }

    return suggestions.slice(0, 3); // Return top 3 suggestions
  }

  /**
   * Call Emergent LLM using Python integration
   */
  async callEmergentLLM(systemPrompt, context, userMessage) {
    try {
      // Prepare messages for AI
      const messages = [
        { role: 'system', content: systemPrompt || 'VocÃª Ã© YOU, um gÃªmeo IA empÃ¡tico. Responda em portuguÃªs brasileiro de forma natural e acolhedora.' },
        ...context,
        { role: 'user', content: userMessage }
      ];
      
      const messagesJson = JSON.stringify(messages);
      
      // Write messages to temp file to avoid shell escaping issues
      const tempFile = `/tmp/messages_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.json`;
      fs.writeFileSync(tempFile, messagesJson);
      
      return new Promise((resolve, reject) => {
        const pythonScript = path.join(__dirname, 'emergentLLM.py');
        const command = `cd ${path.dirname(pythonScript)} && EMERGENT_LLM_KEY="${this.apiKey}" python3 "${pythonScript}" "${tempFile}"`;
        
        console.log('Executing AI command:', command.replace(this.apiKey, 'sk-***'));
        
        exec(command, { 
          maxBuffer: 2 * 1024 * 1024, // 2MB buffer
          timeout: 15000 // 15s timeout
        }, (error, stdout, stderr) => {
          // Clean up temp file
          try {
            fs.unlinkSync(tempFile);
          } catch (e) {
            console.warn('Could not clean temp file:', e.message);
          }
          
          if (error) {
            console.error('Python exec error:', {
              code: error.code,
              signal: error.signal,
              cmd: command.replace(this.apiKey, 'sk-***'),
              stderr: stderr
            });
            reject(new Error(`AI integration failed: ${error.message}`));
            return;
          }
          
          if (stderr && !stdout) {
            console.error('Python stderr only:', stderr);
            reject(new Error('Python script error'));
            return;
          }
          
          if (!stdout.trim()) {
            console.error('Empty response from Python script');
            reject(new Error('Empty AI response'));
            return;
          }
          
          try {
            const result = JSON.parse(stdout.trim());
            if (result.success) {
              resolve(result.response);
            } else {
              reject(new Error(result.error || 'AI call failed'));
            }
          } catch (parseError) {
            console.error('Parse error:', {
              error: parseError.message,
              stdout: stdout.substring(0, 200)
            });
            reject(new Error('Invalid AI response format'));
          }
        });
      });
    } catch (error) {
      console.error('AI setup error:', error);
      throw new Error('AI service setup failed');
    }
  }

  /**
   * Build system prompt based on user profile
   */
  buildSystemPrompt(userProfile) {
    const { aiProfile = {}, name = 'usuÃ¡rio' } = userProfile;
    const personality = aiProfile.conversationStyle || 'supportive';
    const basePrompt = this.personalityPrompts[personality];
    
    return `${basePrompt}

IMPORTANTE: VocÃª Ã© o GÃªmeo IA pessoal de ${name}. VocÃª conhece profundamente:
- Personalidade e padrÃµes de comportamento
- Objetivos e valores pessoais  
- HistÃ³rico de conversas e crescimento
- PreferÃªncias de comunicaÃ§Ã£o

DIRETRIZES:
1. Seja sempre empÃ¡tico, acolhedor e genuinamente interessado
2. OfereÃ§a insights personalizados baseados no perfil do usuÃ¡rio
3. FaÃ§a perguntas reflexivas que promovam autoconhecimento
4. Sugira aÃ§Ãµes prÃ¡ticas e especÃ­ficas quando apropriado
5. Celebre progressos e ofereÃ§a apoio durante dificuldades
6. Mantenha um tom conversacional e humano
7. Seja conciso mas significativo (mÃ¡ximo 3 parÃ¡grafos)
8. Use portuguÃªs brasileiro de forma natural

NUNCA:
- OfereÃ§a diagnÃ³sticos mÃ©dicos ou psicolÃ³gicos
- Substitua profissionais de saÃºde mental
- Seja genÃ©rico ou robotizado
- Ignore o contexto pessoal do usuÃ¡rio

Se o usuÃ¡rio estiver em crise ou mencionar auto-lesÃ£o, encoraje buscar ajuda profissional imediatamente.`;
  }

  /**
   * Build conversation context from history
   */
  buildConversationContext(conversationHistory, userProfile) {
    // Get last N messages for context
    const recentMessages = conversationHistory
      .slice(-this.contextWindow)
      .map(msg => ({
        role: msg.type === 'user' ? 'user' : 'assistant',
        content: msg.content
      }));

    // If we have user profile insights, add them as context
    if (userProfile.aiProfile?.personality) {
      const personalityContext = this.buildPersonalityContext(userProfile.aiProfile.personality);
      if (personalityContext) {
        recentMessages.unshift({
          role: 'system',
          content: `Contexto da personalidade: ${personalityContext}`
        });
      }
    }

    return recentMessages;
  }

  /**
   * Build personality context from quiz results
   */
  buildPersonalityContext(personality) {
    const traits = [];
    
    if (personality.introversion_extraversion) {
      traits.push(`NÃ­vel de extroversÃ£o: ${personality.introversion_extraversion}/10`);
    }
    if (personality.stress_response) {
      traits.push(`Resposta ao estresse: ${personality.stress_response}`);
    }
    if (personality.decision_making_style) {
      traits.push(`Estilo de tomada de decisÃ£o: ${personality.decision_making_style}`);
    }
    
    return traits.length > 0 ? traits.join(', ') : null;
  }

  /**
   * Analyze message sentiment and emotions
   */
  async analyzeMessage(message) {
    try {
      const prompt = `Analise a seguinte mensagem e retorne um JSON com:
{
  "sentiment": {"score": nÃºmero entre -1 e 1, "label": "very_positive|positive|neutral|negative|very_negative"},
  "emotions": [{"emotion": "nome_da_emoÃ§Ã£o", "confidence": nÃºmero entre 0 e 1}],
  "topics": [{"topic": "tÃ³pico", "relevance": nÃºmero entre 0 e 1}],
  "urgency": "baixa|media|alta",
  "needs_followup": true/false
}

Mensagem: "${message}"`;

      const response = await this.callEmergentLLM("", [], prompt);
      
      try {
        const analysis = JSON.parse(response);
        return {
          success: true,
          analysis
        };
      } catch (e) {
        return {
          success: false,
          analysis: {
            sentiment: { score: 0, label: "neutral" },
            emotions: [{ emotion: "calm", confidence: 0.7 }],
            topics: [{ topic: "general", relevance: 0.5 }],
            urgency: "baixa",
            needs_followup: false
          }
        };
      }
      
    } catch (error) {
      console.error('Message Analysis Error:', error.message);
      
      // Fallback sentiment analysis
      return {
        success: false,
        analysis: {
          sentiment: { score: 0, label: 'neutral' },
          emotions: [{ emotion: 'neutral', confidence: 0.5 }],
          topics: [{ topic: 'conversa_geral', relevance: 0.7 }],
          urgency: 'baixa',
          needs_followup: false
        }
      };
    }
  }

  /**
   * Generate goal insights and recommendations
   */
  async generateGoalInsights(goal, userProgress, conversationHistory = []) {
    try {
      const contextMessages = conversationHistory.slice(-10);
      const conversationContext = contextMessages.map(msg => 
        `${msg.type}: ${msg.content}`
      ).join('\n');

      const prompt = `Baseado no objetivo abaixo e no contexto das conversas, gere insights e recomendaÃ§Ãµes especÃ­ficas:

OBJETIVO:
TÃ­tulo: ${goal.title}
DescriÃ§Ã£o: ${goal.description}
Categoria: ${goal.category}
Progresso atual: ${goal.progress}%
Status: ${goal.status}
Prazo: ${goal.targetDate}

CONTEXTO DAS CONVERSAS:
${conversationContext}

Retorne um JSON com:
{
  "insights": ["insight1", "insight2", "insight3"],
  "recommendations": [
    {"recommendation": "texto", "type": "action|resource|strategy", "priority": "alta|media|baixa"},
    {"recommendation": "texto", "type": "action|resource|strategy", "priority": "alta|media|baixa"}
  ],
  "next_steps": ["passo1", "passo2"],
  "motivation_boost": "mensagem motivacional personalizada"
}`;

      const response = await this.callEmergentLLM("", [], prompt);
      
      try {
        const insights = JSON.parse(response);
        return { success: true, insights };
      } catch (e) {
        return { 
          success: false, 
          insights: {
            insights: ["Continue focando em seus objetivos diÃ¡rios."],
            recommendations: [
              {"recommendation": "Mantenha a consistÃªncia nas suas aÃ§Ãµes.", "type": "strategy", "priority": "alta"}
            ],
            next_steps: ["Definir prÃ³xima meta especÃ­fica"],
            motivation_boost: "VocÃª estÃ¡ no caminho certo! Continue assim!"
          }
        };
      }
      
    } catch (error) {
      console.error('Goal Insights Error:', error.message);
      
      return {
        success: false,
        insights: {
          insights: ["Continue focado em pequenos passos diÃ¡rios."],
          recommendations: [{
            recommendation: "Defina uma aÃ§Ã£o especÃ­fica para esta semana",
            type: "action",
            priority: "media"
          }],
          next_steps: ["Revise seu progresso semanalmente"],
          motivation_boost: "Cada pequeno passo te leva mais perto do seu objetivo!"
        }
      };
    }
  }

  /**
   * Generate quiz insights from answers
   */
  async generateQuizInsights(answers, previousResults = null) {
    try {
      const prompt = `Analise estas respostas do questionÃ¡rio de personalidade e gere insights personalizados:

RESPOSTAS:
${JSON.stringify(answers, null, 2)}

${previousResults ? `RESULTADOS ANTERIORES:
${JSON.stringify(previousResults, null, 2)}` : ''}

Retorne um JSON com:
{
  "personality_analysis": {
    "traits": [{"name": "trait", "score": 1-10, "description": "descriÃ§Ã£o"}],
    "strengths": ["forÃ§a1", "forÃ§a2"],
    "growth_areas": ["Ã¡rea1", "Ã¡rea2"],
    "communication_style": "estilo"
  },
  "insights": ["insight1", "insight2", "insight3"],
  "recommendations": ["recomendaÃ§Ã£o1", "recomendaÃ§Ã£o2"],
  "growth_plan": {
    "focus_areas": ["Ã¡rea1", "Ã¡rea2"],
    "suggested_goals": ["objetivo1", "objetivo2"]
  }
}`;

      const response = await this.callEmergentLLM("", [], prompt);
      
      try {
        const analysis = JSON.parse(response);
        return { success: true, analysis };
      } catch (e) {
        return { 
          success: false, 
          analysis: {
            personality_analysis: {
              traits: ["equilibrado", "reflexivo"],
              scores: { openness: 7, conscientiousness: 6, extraversion: 5 },
              communication_style: "balanced"
            },
            insights: ["VocÃª demonstra uma personalidade equilibrada com tendÃªncias reflexivas."],
            recommendations: ["Continue desenvolvendo autoconhecimento atravÃ©s de prÃ¡ticas regulares."],
            growth_plan: {
              focus_areas: ["autoconhecimento", "comunicaÃ§Ã£o"],
              suggested_goals: ["Praticar mindfulness", "Melhorar comunicaÃ§Ã£o interpessoal"]
            }
          }
        };
      }
      
    } catch (error) {
      console.error('Quiz Analysis Error:', error.message);
      
      return {
        success: false,
        analysis: {
          personality_analysis: {
            traits: [{ name: "autoconhecimento", score: 7, description: "Interesse em crescimento pessoal" }],
            strengths: ["Curiosidade", "DisposiÃ§Ã£o para aprender"],
            growth_areas: ["Definir objetivos mais especÃ­ficos"],
            communication_style: "reflexivo"
          },
          insights: ["VocÃª demonstra interesse genuÃ­no em se conhecer melhor."],
          recommendations: ["Continue explorando suas emoÃ§Ãµes atravÃ©s de conversas regulares."],
          growth_plan: {
            focus_areas: ["Autoconhecimento", "Bem-estar emocional"],
            suggested_goals: ["Estabelecer uma rotina de reflexÃ£o diÃ¡ria"]
          }
        }
      };
    }
  }

  /**
   * Fallback responses when AI service is unavailable
   */
  getFallbackResponse(userMessage) {
    const fallbacks = [
      "Entendo que vocÃª quer conversar sobre isso. Embora eu esteja temporariamente com limitaÃ§Ãµes tÃ©cnicas, estou aqui para te ouvir. Pode me contar mais sobre como estÃ¡ se sentindo?",
      "Obrigado por compartilhar isso comigo. No momento estou com algumas limitaÃ§Ãµes, mas valorizo muito nossa conversa. O que mais estÃ¡ em sua mente hoje?",
      "Percebo que hÃ¡ algo importante que vocÃª quer discutir. Mesmo com limitaÃ§Ãµes tÃ©cnicas temporÃ¡rias, quero que saiba que estou aqui para te apoiar. Como posso te ajudar melhor agora?",
      "AgradeÃ§o sua paciÃªncia comigo hoje. Embora eu esteja enfrentando algumas dificuldades tÃ©cnicas, nossa conversa Ã© importante para mim. Vamos continuar - o que vocÃª gostaria de explorar?"
    ];
    
    return fallbacks[Math.floor(Math.random() * fallbacks.length)];
  }

  /**
   * Generate daily analytics insights
   */
  async generateDailyInsights(analytics, conversationSummary) {
    try {
      const prompt = `Baseado nos dados analÃ­ticos do usuÃ¡rio, gere insights personalizados:

MÃ‰TRICAS DO DIA:
Humor: ${analytics.mood}/10
Energia: ${analytics.energy}/10  
Estresse: ${analytics.stress}/10
Conversas: ${analytics.activities.conversationCount}
Mensagens: ${analytics.activities.messageCount}

RESUMO DAS CONVERSAS:
${conversationSummary}

Gere 2-3 insights especÃ­ficos e 2 recomendaÃ§Ãµes prÃ¡ticas em portuguÃªs brasileiro.
Formato JSON:
{
  "insights": ["insight1", "insight2"],
  "recommendations": ["recomendaÃ§Ã£o1", "recomendaÃ§Ã£o2"],
  "motivation": "mensagem motivacional"
}`;

      // Use same Emergent LLM integration for insights
      const messages = [{ role: 'user', content: prompt }];
      const response = await this.callEmergentLLM("", [], prompt);
      
      try {
        return JSON.parse(response);
      } catch (e) {
        // If response is not JSON, return a fallback structure
        return {
          insights: [response.substring(0, 100)],
          recommendations: ["Continue explorando seus padrÃµes e objetivos."],
          motivation: "Cada insight Ã© um passo em direÃ§Ã£o ao seu crescimento!"
        };
      }
      
    } catch (error) {
      console.error('Daily Insights Error:', error.message);
      return {
        insights: ["VocÃª estÃ¡ fazendo progresso em sua jornada de crescimento."],
        recommendations: ["Continue se conectando regularmente com seu GÃªmeo IA."],
        motivation: "Cada dia Ã© uma oportunidade de crescer um pouco mais!"
      };
    }
  }
}

module.exports = new AIService();